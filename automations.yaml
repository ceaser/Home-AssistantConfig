################################################################################
# Security 
################################################################################
- id: image_processing_scan
  alias: 'Image Processing Scan'
  initial_state: 'on'
  trigger:
    - platform: state
      entity_id:
        - binary_sensor.driveway_motion_detected
      from: 'off'
      to: 'on'
  action:
 #    - service: logbook.log
 #      data_template:
 #        name: "Image: "
 #        message: >-
 #          Scanning image_processing.tensorflow_{{ trigger.entity_id.split('.')[1].split('_')[0] }}
    - service: image_processing.scan
      data_template:
        entity_id: "image_processing.tensorflow_{{ trigger.entity_id.split('.')[1].split('_')[0] }}"

# - id: tf_image_processing_notification
#   alias: 'TF image processing'
#   initial_state: 'on'
#   trigger:
#     - platform: state
#       entity_id:
#         - image_processing.tensorflow_driveway
#   condition:
#     - condition: template
#       value_template: '{{ trigger.to_state.state |int > 0 }}'
#   action:
#     - service: logbook.log
#       data_template:
#         name: "TF: "
#         message: >-
#           {% for object in state_attr(trigger.entity_id,'matches').keys() -%}{%- if loop.first %}{% elif loop.last %}, {% else %}, {% endif -%}{{ object|title }}{%- endfor %} detected in {{ trigger.entity_id.split('.')[1].split('_')[1] }}.

- id: 'record_object_detected'
  alias: Record object detected
  initial_state: 'on'
  trigger:
  - platform: state
    entity_id:
      - image_processing.tensorflow_driveway
  condition:
  - condition: template
    value_template: '{{ trigger.to_state.state |int > 0 }}'
  - condition: template
    value_template: >
      {%- if states.automation.record_object_detected.attributes.last_triggered -%}
        {{ (as_timestamp(now()) - as_timestamp(states.automation.record_object_detected.attributes.last_triggered)) > 40 }}
      {%- else -%}
        true
      {%- endif -%}
  action:
  - service: logbook.log
    data_template:
      name: "Record: "
      message: >-
        {% for object in state_attr(trigger.entity_id,'matches').keys() -%}{%- if loop.first %}{% elif loop.last %}, {% else %}, {% endif -%}{{ object|title }}{%- endfor %} detected in {{ trigger.entity_id.split('.')[1].split('_')[1] }}. Saving to /local/{{ trigger.entity_id.split('.')[1].split('_')[1] }}_{{ now().strftime('%Y%m%d_%H%M%S') }}.mp4
  - service: camera.record
    data_template:
      duration: 30
      entity_id: camera.{{ trigger.entity_id.split('.')[1].split('_')[1] }}
      filename: /home/homeassistant/.homeassistant/www/{{ trigger.entity_id.split('.')[1].split('_')[1] }}_{{ now().strftime('%Y%m%d_%H%M%S') }}.mp4
      lookback: 30

- id: notify_camera_videos
  alias: 'Notify camera videos'
  initial_state: 'on'
  trigger:
  - platform: event
    event_type: folder_watcher
    event_data:
      event_type: created
  condition: []
  action:
  - service: notify.motiondetectgroup
    data_template:
      title: 'Camera recording'
      message: 'Motion detected'
      data:
        attachment:
          hide-thumbnail: false
          url: /local/{{ trigger.event.data.file
            }}
        subtitle: Swipe left to view
        thread-id: motion-detected

- id: notify_camera_pictures
  alias: 'Notify camera pictures'
  initial_state: 'off'
  trigger:
    - platform: state
      entity_id:
        - binary_sensor.driveway_motion_detected
      from: 'off'
      to: 'on'
  condition:
    - condition: template
      value_template: >
        {%- if states.automation.notify_camera_pictures.attributes.last_triggered -%}
          {{ (as_timestamp(now()) - as_timestamp(states.automation.notify_camera_pictures.attributes.last_triggered)) > 300 }}
        {%- else -%}
          true
        {%- endif -%}
  action:
    - service: notify.ios_0x4950686f6e65
      data_template:
        message: "Check {{ trigger.entity_id.split('.')[1].split('_')[0] }} camera."
        data:
          push:
            category: camera
          entity_id: "camera.{{ trigger.entity_id.split('.')[1].split('_')[0] }}"
          attachment:
            url: "{{ states.camera[trigger.entity_id.split('.')[1].split('_')[0]].attributes.entity_picture }}"
            content-type: jpg
    - service: logbook.log
      data_template:
        name: "Camera activity: "
        message: >-
          {%- for state in states if state.entity_id == trigger.entity_id -%}
            {{ state.attributes.friendly_name }} activated at {{ as_timestamp(now()) | timestamp_custom('%I:%M:%S %p', true) }}.
          {%- endfor -%}

###############################################################################
# Reminders 
################################################################################
- id: notify_vitara  
  alias: 'Notify Vitara location'
  initial_state: 'on'
  trigger:
    - platform: zone
      entity_id: person.ceaser
      event: enter
      zone: zone.roy_station
  condition:
    - condition: and
      conditions:
      - condition: state
        entity_id: binary_sensor.workday_sensor
        state: 'on'
      - before: '19:00:00'
        condition: time
  action:
    - data:
        message: The Vitara is parked at the {{ states("device_tracker.tile_12a30813c9c31a80")
          }}
      service: notify.ios_0x4950686f6e65

