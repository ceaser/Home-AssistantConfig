################################################################################
# image_processing_scan triggers a Tensorflow scan when motion is detected
################################################################################
- id: image_processing_scan
  alias: 'Image Processing Scan'
  initial_state: 'on'
  trigger:
    - platform: state
      entity_id:
        - binary_sensor.driveway_motion_detected
      from: 'off'
      to: 'on'
  action:
    - service: logbook.log
      data_template:
        name: "Image: "
        message: >-
          Scanning image_processing.tensorflow_{{ trigger.entity_id.split('.')[1].split('_')[0] }} at {{ now().strftime('%Y%m%d_%H%M%S') }}.
    - service: image_processing.scan
      data_template:
        entity_id: "image_processing.tensorflow_{{ trigger.entity_id.split('.')[1].split('_')[0] }}"

################################################################################
# notify_camera_videos sends a notification when a new video is created
################################################################################
- id: notify_camera_videos
  alias: 'Notify camera videos'
  initial_state: 'off'
  trigger:
  - platform: event
    event_type: folder_watcher
    event_data:
      event_type: created
  condition: []
  action:
  - service: notify.motiondetectgroup
    data_template:
      title: 'Camera recording'
      message: 'Motion detected'
      data:
        attachment:
          hide-thumbnail: false
          url: /local/{{ trigger.event.data.file
            }}
        subtitle: Swipe left to view
        thread-id: motion-detected

################################################################################
# notify_*_camera_pictures sends a picture of the object detected in the
# image_processing_scan. If has conditions for a specific input_boolean and
# notify device
################################################################################
- id: notify_ceaser_camera_pictures
  alias: 'Notify Ceaser camera pictures'
  initial_state: 'on'
  trigger:
    - platform: state
      entity_id:
      - image_processing.tensorflow_driveway
  condition:
    - condition: state
      entity_id: input_boolean.notify_0x4950686f6e65
      state: 'on'
    - condition: template
      value_template: '{{ trigger.to_state.state |int > 0 }}'
    - condition: template
      value_template: >
        {%- if states.automation.notify_ceaser_camera_pictures.attributes.last_triggered -%}
          {{ (as_timestamp(now()) - as_timestamp(states.automation.notify_ceaser_camera_pictures.attributes.last_triggered)) > 30 }}
        {%- else -%}
          true
        {%- endif -%}
  action:
    - service: notify.mobile_app_0x4950686f6e65
      data_template:
        message: >
          {{ state_attr(trigger.entity_id,'matches').keys()|list|unique|list|join(', ')|title }} detected in {{ trigger.entity_id.split('.')[1].split('_')[1] }} camera.
        data:
          push:
            category: 'alarm'
# Stream video
#          entity_id: "camera.{{ trigger.entity_id.split('.')[1].split('_')[1] }}"
          attachment:
            hide-thumbnail: false
# Blank with API link
#            url: >
#              {{ states.camera[trigger.entity_id.split('.')[1].split('_')[1]].attributes.entity_picture }}
            url: "/local/{{ trigger.entity_id.split('.')[1].split('_')[1] }}_latest.jpg"
            content-type: jpg
          subtitle: Swipe left to view

################################################################################
# notify_*_camera_pictures sends a picture of the object detected in the
# image_processing_scan. If has conditions for a specific input_boolean and
# notify device
################################################################################
- id: notify_sarah_camera_pictures
  alias: 'Notify Sarah camera pictures'
  initial_state: 'on'
  trigger:
    - platform: state
      entity_id:
      - image_processing.tensorflow_driveway
  condition:
    - condition: state
      entity_id: input_boolean.notify_iphone
      state: 'on'
    - condition: template
      value_template: '{{ trigger.to_state.state |int > 0 }}'
    - condition: template
      value_template: >
        {%- if states.automation.notify_sarah_camera_pictures.attributes.last_triggered -%}
          {{ (as_timestamp(now()) - as_timestamp(states.automation.notify_sarah_camera_pictures.attributes.last_triggered)) > 30 }}
        {%- else -%}
          true
        {%- endif -%}
  action:
    - service: notify.mobile_app_sarahs_iphone
      data_template:
        message: >
          {{ state_attr(trigger.entity_id,'matches').keys()|list|unique|list|join(', ')|title }} detected in {{ trigger.entity_id.split('.')[1].split('_')[1] }} camera.
        data:
          push:
            category: 'alarm'
# Stream video
#          entity_id: "camera.{{ trigger.entity_id.split('.')[1].split('_')[1] }}"
          attachment:
            hide-thumbnail: false
# Blank with API link
#            url: >
#              {{ states.camera[trigger.entity_id.split('.')[1].split('_')[1]].attributes.entity_picture }}
            url: "/local/{{ trigger.entity_id.split('.')[1].split('_')[1] }}_latest.jpg"
            content-type: jpg
          subtitle: Swipe left to view

################################################################################
# notify_*_camera_pictures sends a picture of the object detected in the
# image_processing_scan. If has conditions for a specific input_boolean and
# notify device
################################################################################
- id: notify_cearah_camera_pictures
  alias: 'Notify Cearah camera pictures'
  initial_state: 'on'
  trigger:
    - platform: state
      entity_id:
      - image_processing.tensorflow_driveway
  condition:
    - condition: state
      entity_id: input_boolean.notify_cearah_iphone
      state: 'on'
    - condition: template
      value_template: '{{ trigger.to_state.state |int > 0 }}'
    - condition: template
      value_template: >
        {%- if states.automation.notify_cearah_camera_pictures.attributes.last_triggered -%}
          {{ (as_timestamp(now()) - as_timestamp(states.automation.notify_cearah_camera_pictures.attributes.last_triggered)) > 30 }}
        {%- else -%}
          true
        {%- endif -%}
  action:
    - service: notify.mobile_app_iphone
      data_template:
        message: >
          {{ state_attr(trigger.entity_id,'matches').keys()|list|unique|list|join(', ')|title }} detected in {{ trigger.entity_id.split('.')[1].split('_')[1] }} camera.
        data:
          push:
            category: 'alarm'
# Stream video
#          entity_id: "camera.{{ trigger.entity_id.split('.')[1].split('_')[1] }}"
          attachment:
            hide-thumbnail: false
# Blank with API link
#            url: >
#              {{ states.camera[trigger.entity_id.split('.')[1].split('_')[1]].attributes.entity_picture }}
            url: "/local/{{ trigger.entity_id.split('.')[1].split('_')[1] }}_latest.jpg"
            content-type: jpg
          subtitle: Swipe left to view

################################################################################
# silent_notification disabled a person's notification. This automation is a
# call back from the notify_*_camera_pictures.
################################################################################
- id: silent_notification
  alias: 'Silent Notifications'
  initial_state: 'on'
  trigger:
    - platform: event
      event_type: ios.notification_action_fired
      event_data:
        actionName: 'DISABLE_PUSH'
  action:
    - service: logbook.log
      data_template:
        name: "Action: "
        message: >-
          Received {{ trigger.event.data }}
    - service: input_boolean.turn_off
      data_template:
        entity_id: 'input_boolean.notify_{{ trigger.event.data.sourceDeviceID }}'

################################################################################
# notify_alexa sends a announcement to all Amazon Echo when a object is
# detected from the image_processing_scan
################################################################################
- id: notify_alexa
  alias: 'Notify Alexa'
  initial_state: 'on'
  trigger:
    - platform: state
      entity_id:
      - image_processing.tensorflow_driveway
  condition:
    - condition: state
      entity_id: input_boolean.notify_alexa
      state: 'on'
    - condition: template
      value_template: '{{ trigger.to_state.state |int > 0 }}'
    - condition: template
      value_template: >
        {%- if states.automation.notify_alexa.attributes.last_triggered -%}
          {{ (as_timestamp(now()) - as_timestamp(states.automation.notify_alexa.attributes.last_triggered)) > 30 }}
        {%- else -%}
          true
        {%- endif -%}
  action:
    - service: sonos.snapshot
      data:
        entity_id: media_player.sonos_familyroom
        with_group: true
    - service: notify.alexa_media
      data_template:
        target:
          - media_player.kitchen
          - media_player.sandra_s_room
        title: >
          "camera.{{ trigger.entity_id.split('.')[1].split('_')[1] }} notification"
        message: >
          Detected a {{ state_attr(trigger.entity_id,'matches').keys()|list|unique|list|join(' and ')|title }} in the {{ trigger.entity_id.split('.')[1].split('_')[1] }} camera.
        data:
          type: announce
          method: speak
    - service: sonos.restore
      data:
        entity_id: media_player.sonos_familyroom
        with_group: true

################################################################################
# climate_away_mode sets the thermostats to eco and away mode when humans are
# away
################################################################################
- id: climate_away_mode
  alias: 'Climate Away Mode'
  initial_state: 'off'
  trigger:
    - platform: zone
      entity_id: person.ceaser
      event: leave
      zone: zone.home
    - platform: zone
      entity_id: person.cearah
      event: leave
      zone: zone.home
    - platform: zone
      entity_id: person.sarah
      event: leave
      zone: zone.home
  condition:
    - condition: state
      entity_id: binary_sensor.hallway_thermostat_online
      state: 'on'
    - condition: template
      value_template: '{{
        states.climate.hallway.attributes.away_mode == "off" and
        states.person.cearah.state != "home" and
        states.person.ceaser.state != "home" and
        states.person.sarah.state != "home"}}'
  action:
    - service: climate.set_preset_mode
      data:
        entity_id: climate.hallway
        preset_mode: 'Away and Eco'

################################################################################
# climate_home_mode sets the thermostats to auto mode when humans are
# home
################################################################################
- id: climate_home_mode
  alias: 'Climate Home Mode'
  initial_state: 'off'
  trigger:
    - platform: zone
      entity_id: person.ceaser
      event: enter
      zone: zone.home
    - platform: zone
      entity_id: person.cearah
      event: enter
      zone: zone.home
    - platform: zone
      entity_id: person.sarah
      event: enter
      zone: zone.home
    - platform: zone
      entity_id: person.ceaser
      event: enter
      zone: zone.east_gate
    - platform: zone
      entity_id: person.cearah
      event: enter
      zone: zone.east_gate
    - platform: zone
      entity_id: person.sarah
      event: enter
      zone: zone.east_gate
  condition:
    - condition: state
      entity_id: binary_sensor.hallway_thermostat_online
      state: 'on'
    - condition: template
      value_template: '{{
        states.climate.hallway.attributes.away_mode == "on" and
        (
          states.person.cearah.state == "home" or
          states.person.ceaser.state == "home" or
          states.person.sarah.state == "home"
        ) }}'
  action:
    - service: climate.set_preset_mode
      data:
        entity_id: climate.hallway
        preset_mode: none

- id: turn_on_fan
  alias: 'Turn on fan'
  initial_state: 'off'
  trigger:
    - platform: numeric_state
      entity_id: sensor.office_temperature
      below: 75
    - platform: numeric_state
      entity_id: sensor.office_temperature
      above: 80
    - platform: numeric_state
      entity_id: sensor.office_temperature
      below: 79
    - platform: numeric_state
      entity_id: sensor.office_temperature
      above: 80
  condition:
    - condition: template
      value_template: >
        {%- if states.automation.turn_on_fan.attributes.last_triggered -%}
          {{ (as_timestamp(now()) - as_timestamp(states.automation.turn_on_fan.attributes.last_triggered)) > 1800 }}
        {%- else -%}
          true
        {%- endif -%}
    - condition: state
      entity_id: sensor.hallway_thermostat_hvac_state
      state: 'off'
    - condition: state
      entity_id: binary_sensor.hallway_thermostat_fan
      state: 'off'
    - condition: state
      entity_id: binary_sensor.hallway_thermostat_online
      state: 'on'
    - condition: template
      value_template: <
        {{ (states.climate.hallway.attributes.target_temp_high | int) - (states.sensor.office_temperature.state |round | int ) > 3 }}
  action:
    - service: climate.set_fan_mode
      data:
        entity_id: climate.hallway
        fan_mode: 'on'

- id: turn_off_fan
  alias: 'Turn off fan'
  initial_state: 'off'
  trigger:
    - platform: numeric_state
      entity_id: sensor.office_temperature
      below: 80
      above: 75
    - platform: numeric_state
      entity_id: sensor.office_temperature
      below: 80
      above: 79
  condition:
    - condition: template
      value_template: >
        {%- if states.automation.turn_off_fan.attributes.last_triggered -%}
          {{ (as_timestamp(now()) - as_timestamp(states.automation.turn_off_fan.attributes.last_triggered)) > 1800 }}
        {%- else -%}
          true
        {%- endif -%}
    - condition: state
      entity_id: sensor.hallway_thermostat_hvac_state
      state: 'off'
    - condition: state
      entity_id: binary_sensor.hallway_thermostat_fan
      state: 'on'
    - condition: state
      entity_id: binary_sensor.hallway_thermostat_online
      state: 'on'
    - condition: template
      value_template: <
        {{ (states.climate.hallway.attributes.target_temp_high | int) - (states.sensor.office_temperature.state |round | int ) <= 3 }}
  action:
    - service: climate.set_fan_mode
      data:
        entity_id: climate.hallway
        fan_mode: 'off'


################################################################################
# notify_vitara sends an alert where I last parted the second car when I get
# on the train.
################################################################################
- id: notify_vitara
  alias: 'Notify Vitara location'
  initial_state: 'on'
  trigger:
    - platform: zone
      entity_id: person.ceaser
      event: enter
      zone: zone.roy_station
  condition:
    - condition: and
      conditions:
      - condition: state
        entity_id: binary_sensor.workday_sensor
        state: 'on'
      - before: '19:00:00'
        condition: time
  action:
    - service: notify.mobile_app_0x4950686f6e65
      data:
        message: The Vitara is parked at the {{ states("device_tracker.tile_969f352152684c55")
          }}

################################################################################
# alexa_morning_volume_kitchen changes the default volume to what is set for the
# morning volume
################################################################################
- id: alexa_morning_volume_default
  alias: 'Alexa Volume [Morning]: Default'
  trigger:
  - platform: template
    value_template: "{{ states('sensor.time') == (state_attr('input_datetime.alexa_morning_volume', 'timestamp') | int | timestamp_custom('%H:%M', False)) }}"
  action:
  - service: input_number.set_value
    data_template:
      entity_id: input_number.alexa_default_volume
      value: "{{ states('input_number.alexa_morning_volume') | int }}"

- id: alexa_night_volume_default
  alias: 'Alexa Volume [Night]: Default'
  trigger:
  - platform: template
    value_template: "{{ states('sensor.time') == (state_attr('input_datetime.alexa_night_volume', 'timestamp') | int | timestamp_custom('%H:%M', False)) }}"
  action:
  - service: input_number.set_value
    data_template:
      entity_id: input_number.alexa_default_volume
      value: "{{ states('input_number.alexa_night_volume') | int }}"

- id: alexa_change_volume
  alias: 'Alexa Change Volume'
  trigger:
  - platform: state
    entity_id: input_number.alexa_default_volume
  action:
  - service: media_player.volume_set
    data_template:
      entity_id:
      - media_player.kitchen
      volume_level: "{{ states('input_number.alexa_default_volume') | float | multiply(0.01) | round(0.1) }}"
  - condition: state
    entity_id: media_player.sonos_familyroom
    state: idle
  - service: media_player.volume_set
    data_template:
      entity_id:
      - media_player.sonos_familyroom
      volume_level: "{{ states('input_number.alexa_default_volume') | float | multiply(0.01) | round(0.1) }}"

################################################################################
# capture_cleaning_map updates the vacuums cleaning map
################################################################################
- id: capture_cleaning_map
  alias: 'Update Cleaning Map'
  initial_state: 'on'
  trigger:
  - platform: state
    entity_id:
      - vacuum.basement
      - vacuum.upstairs
    from: 'cleaning'
    to: 'docked'
  condition: []
  action:
  - service: camera.snapshot
    data_template:
      entity_id: "camera.{{ trigger.entity_id.split('.')[1].split('_')[0] }}_cleaning_map"
      filename: "/config/www/{{ trigger.entity_id.split('.')[1].split('_')[0] }}_cleaning_map_latest.jpg"

################################################################################
# network_away_mode resume all network services that consume large amount of
# bandwidth
################################################################################
- id: network_away_mode
  alias: 'Network Away Mode'
  initial_state: 'off'
  trigger:
    - platform: zone
      entity_id: person.cearah
      event: leave
      zone: zone.home
    - platform: zone
      entity_id: person.sarah
      event: leave
      zone: zone.home
    - platform: time
      at: '00:00:00'
  condition:
    condition: or
    conditions:
      - condition: template
        value_template: '{{
          states.person.cearah.state != "home" and
          states.person.sarah.state != "home"}}'
      - condition: time
        before: '08:00:00'
  action:
    - service: rest_command.nzbget
      data:
        method: resumedownload
    - service: rest_command.aria2
      data:
        method: aria2.unpauseAll
        token: !secret aria2_token
    - service: shell_command.deluge_resume

################################################################################
# network_home_mode pauses all network services that consume large amount of
# bandwidth
################################################################################
- id: network_home_mode
  alias: 'Network Home Mode'
  initial_state: 'off'
  trigger:
    - platform: zone
      entity_id: person.cearah
      event: enter
      zone: zone.home
    - platform: zone
      entity_id: person.sarah
      event: enter
      zone: zone.home
  condition:
    condition: or
    conditions:
      - condition: template
        value_template: '{{
          states.person.cearah.state == "home" or
          states.person.sarah.state == "home"}}'
      - condition: time
        after: '08:00:00'
  action:
    - service: rest_command.nzbget
      data:
        method: pausedownload
    - service: rest_command.aria2
      data:
        method: aria2.pauseAll
        token: !secret aria2_token
    - service: shell_command.deluge_pause

################################################################################
# Sonos
################################################################################
- id: sonos_idle_volume
  alias: 'Sonos Idle Volume'
  trigger:
    - platform: state
      entity_id: media_player.sonos_familyroom
      from: playing
      to: idle
  action:
    - service: media_player.volume_set
      data_template:
        entity_id: media_player.sonos_familyroom
        volume_level: "{{ states('input_number.alexa_default_volume') | float | multiply(0.01) | round(0.1) }}"

- id: sonos_tv_volume
  alias: 'Sonos TV Volume'
  trigger:
    - platform: state
      entity_id: media_player.sonos_familyroom
      from: idle
      to: playing
  action:
    - service: media_player.volume_set
      data_template:
        entity_id: media_player.sonos_familyroom
        volume_level: "{{ states('input_number.sonos_tv_volume') | float | multiply(0.01) | round(0.1) }}"

- id: sonos_get
  alias: 'Sonos Get'
  initial_state: 'on'
  trigger:
    - platform: homeassistant
      event: start
    - platform: state
      entity_id: media_player.sonos_familyroom
  action:
    - service_template: "homeassistant.turn_{{ 'on' if is_state_attr('media_player.sonos_familyroom', 'speech_enhance', true) else 'off' }}"
      data:
        entity_id: input_boolean.sonos_familyroom_speech_enhance
    - service_template: "homeassistant.turn_{{ 'on' if is_state_attr('media_player.sonos_familyroom', 'night_sound', true) else 'off' }}"
      data:
        entity_id: input_boolean.sonos_familyroom_night_sound
    - service: "input_select.select_option"
      data_template:
        entity_id: input_select.sonos_familyroom_source
        option: "{{ 'TV' if is_state_attr('media_player.sonos_familyroom', 'source', 'TV') else 'None' }}"

- id: sonos_set
  alias: 'Sonos Set'
  initial_state: 'on'
  trigger:
    - platform: state
      entity_id:
        - input_boolean.sonos_familyroom_night_sound
        - input_boolean.sonos_familyroom_speech_enhance
  condition:
    - condition: template
      value_template: >
        {%- if states.automation.sonos_set.attributes.last_triggered -%}
          {{ (as_timestamp(now()) - as_timestamp(states.automation.sonos_set.attributes.last_triggered)) > 2 }}
        {%- else -%}
          true
        {%- endif -%}
    - condition: template
      value_template: '{{
        ( is_state_attr("media_player.sonos_familyroom", "night_sound", true) != is_state("input_boolean.sonos_familyroom_night_sound", "on")) or
        ( is_state_attr("media_player.sonos_familyroom", "speech_enhance", true) != is_state("input_boolean.sonos_familyroom_speech_enhance", "on")) }}'
  action:
    - delay: 00:00:01
    - service: sonos.set_option
      data_template:
        entity_id: "media_player.sonos_familyroom"
        night_sound: >
          {{ states('input_boolean.sonos_familyroom_night_sound') == "on" }}
        speech_enhance: >
          {{ states('input_boolean.sonos_familyroom_speech_enhance') == "on" }}

################################################################################
# Printing
################################################################################
- id: notify_when_printer_is_ready
  alias: 'Notify When Printer is Ready'
  initial_state: on
  trigger:
    - platform: template
      value_template: "{{ ((states('sensor.octoprint_tool_0_temperature') | int) * 9/5) + 32 >=
 states('input_number.octoprint_expected_tool_temperature') | int }}"
      for:
        minutes: "{{ states('input_number.octoprint_warmup_minutes') | int }}"
    #- platform: numeric_state
      #entity_id: sensor.octoprint_tool_0_temperature
      #above: 374 # 190 C
      #for:
        #minutes: 5
    - platform: template
      value_template: "{{ ((states('sensor.octoprint_bed_temperature') | int) * 9/5) + 32 >=
 states('input_number.octoprint_expected_bed_temperature') | int }}"
      for:
        minutes: "{{ states('input_number.octoprint_warmup_minutes') | int }}"
    #- platform: numeric_state
      #entity_id: sensor.octoprint_bed_temperature
      #above: 104 # 40 C
      #for:
        #minutes: 5
  condition:
    - condition: template
      value_template: >
        {%- if states.automation.notify_when_printer_is_ready.attributes.last_triggered -%}
          {{ (as_timestamp(now()) - as_timestamp(states.automation.notify_when_printer_is_ready.attributes.last_triggered)) > 60 }}
        {%- else -%}
          true
        {%- endif -%}
    - condition: state
      entity_id: binary_sensor.octoprint_printing
      state: 'off'
    #- condition: numeric_state
      #entity_id: sensor.octoprint_tool_0_temperature
      #above: 374
  action:
    - service: notify.mobile_app_0x4950686f6e65
      data_template:
        message: "Printer is ready"
        data:
          push:
            category: 'printer'

- id: notify_when_printer_is_finished
  alias: 'Notify When Printer is Finished'
  initial_state: on
  trigger:
    - platform: state
      entity_id: binary_sensor.octoprint_printing
      from: 'on'
      to: 'off'
  action:
    - service: notify.mobile_app_0x4950686f6e65
      data_template:
        message: "Printing is completed"
        data:
          push:
            category: 'printer'
          attachment:
            hide-thumbnail: false
            url: camera.anet_a8.attributes.entity_picture
          subtitle: Swipe left to view

- id: turn_off_power_when_finished_printing
  alias: 'Turn off power when finished printing'
  initial_state: off
  description: Shutdown the printer once is has cooled down
  trigger:
    - platform: template
      value_template: "{{ ((states('sensor.octoprint_tool_0_temperature') | int) * 9/5) + 32 <
 states('input_number.octoprint_cooldown_tool_temperature') | int }}"
      for:
        minutes: "{{ states('input_number.cooldown_minutes') | int }}"
    #- below: "104.0" # 40 C
      #entity_id: sensor.octoprint_tool_0_temperature
      #for: 00:01:00
      #platform: numeric_state
  condition:
    - condition: template
      value_template: >
        {%- if states.automation.turn_off_power_when_finished_printing.attributes.last_triggered -%}
          {{ (as_timestamp(now()) - as_timestamp(states.automation.turn_off_power_when_finished_printing.attributes.last_triggered)) > 300 }}
        {%- else -%}
          true
        {%- endif -%}
    - condition: state
      entity_id: binary_sensor.octoprint_printing
      state: 'off'
  action:
    - service: shell_command.stop_octoprint
    - service: logbook.log
      data_template:
        name: "Printer: "
        message: >-
          Shutdown Octoprint
    - service: light.turn_off
      data:
        entity_id: light.storage_room
    - service: logbook.log
      data_template:
        name: "Printer: "
        message: >-
          Turn off Storage Room Light
    - delay: '00:02:00'
    - service: switch.turn_off
      data:
        entity_id: switch.anet_a8_power_strip
    - service: logbook.log
      data_template:
        name: "Printer: "
        message: >-
          Turn off Anet A8 Power Strip
    - service: automation.turn_off
      entity_id: automation.turn_off_power_when_finished_printing

- id: notify_when_printer_is_operational
  alias: 'Notify When Printer is Operational'
  initial_state: on
  trigger:
    - platform: state
      entity_id: binary_sensor.octoprint_connected
      from: 'off'
      to: 'on'
    - platform: state
      entity_id: binary_sensor.octoprint_connected
      from: 'unavailable'
      to: 'on'
  action:
    - service: notify.mobile_app_0x4950686f6e65
      data_template:
        message: "Printer Online"
        data:
          push:
            category: 'printer'

################################################################################
# Automower
################################################################################
- id: 'park_automower'
  alias: Park Automower
  trigger:
    - platform: numeric_state
      entity_id: sensor.dark_sky_precip_probability
      above: 90
  condition:
    condition: state
    entity_id: input_boolean.automower_season
    state: 'on'
  action:
    - service: logbook.log
      data_template:
        name: "Automower: "
        message: >-
          Parking Automower {{ now().strftime('%Y%m%d_%H%M%S') }}.
    - service: vacuum.return_to_base
      data:
        entity_id: vacuum.automower
    - service: notify.mobile_app_0x4950686f6e65
      data_template:
        message: "Automower Parked"
        data:
          push:
            category: 'automower'

- id: 'start_automower'
  alias: Start Automower
  trigger:
    - platform: numeric_state
      entity_id: sensor.dark_sky_precip_probability
      below: 50
  condition:
    - condition: or
      conditions:
      - condition: state
        entity_id: vacuum.automower
        state: Cutting
      - condition: state
        entity_id: vacuum.automower
        state: Cutting (manual timer override)
      - condition: state
        entity_id: vacuum.automower
        state: Leaving base
    - condition: state
      entity_id: input_boolean.automower_season
      state: 'on'
  action:
    - service: logbook.log
      data_template:
        name: "Automower: "
        message: >-
          Starting Automower {{ now().strftime('%Y%m%d_%H%M%S') }}.
    - service: vacuum.return_to_base
      data:
        entity_id: vacuum.automower
    - service: notify.mobile_app_0x4950686f6e65
      data_template:
        message: "Automower Started"
        data:
          push:
            category: 'automower'


- id: 'pause_automower'
  alias: Pause Automower
  trigger:
    - entity_id: input_boolean.dog_outside
      from: 'off'
      platform: state
      to: 'on'
  condition:
    - condition: or
      conditions:
      - condition: state
        entity_id: vacuum.automower
        state: Cutting
      - condition: state
        entity_id: vacuum.automower
        state: Cutting (manual timer override)
      - condition: state
        entity_id: vacuum.automower
        state: Leaving base
    - condition: state
      entity_id: input_boolean.automower_season
      state: 'on'
  action:
    - service: logbook.log
      data_template:
        name: "Automower: "
        message: >-
          Pausing Automower {{ now().strftime('%Y%m%d_%H%M%S') }}.
    - service: vacuum.start_pause
      data:
        entity_id: vacuum.automower
    - service: notify.mobile_app_0x4950686f6e65
      data_template:
        message: "Automower Paused"
        data:
          push:
            category: 'automower'

- id: 'resume_automower_after_pause'
  alias: Resume Automower After Pause
  trigger:
    - entity_id: input_boolean.dog_outside
      from: 'on'
      platform: state
      to: 'off'
  condition:
    - condition: state
      entity_id: vacuum.automower
      state: Paused
    - condition: state
      entity_id: input_boolean.automower_season
      state: 'on'
  action:
    - service: logbook.log
      data_template:
        name: "Automower: "
        message: >-
          Resuming Automower {{ now().strftime('%Y%m%d_%H%M%S') }}.
    - data:
        entity_id: vacuum.automower
      service: vacuum.start_pause

################################################################################
# RainMachine
################################################################################
- id: 'pause_rainmachine'
  alias: Pause RainMachine
  trigger:
  - entity_id: input_boolean.dog_outside
    from: 'off'
    platform: state
    to: 'on'
  condition: []
  action:
  - data_template:
      seconds: "{{ (states('input_number.dog_outside_minutes') | int) * 60 }}"
    service: rainmachine.pause_watering

################################################################################
# Garage Lights
################################################################################
- id: 'turn_on_garage_entry_light'
  alias: Turn on Garage Entry Light
  trigger:
  - entity_id: input_boolean.dog_outside
    from: 'off'
    platform: state
    to: 'on'
  condition:
  - condition: state  # from sunset until sunrise
    entity_id: sun.sun
    state: 'below_horizon'
  action:
  - data:
      entity_id: light.garage_entry
    service: light.turn_on

- id: 'turn_off_garage_entry_light'
  alias: Turn off Garage Entry Light
  trigger:
  - entity_id: input_boolean.dog_outside
    from: 'on'
    platform: state
    to: 'off'
  condition: []
  action:
  - data:
      entity_id: light.garage_entry
    service: light.turn_off

- id: 'run_outside_night_lights_at_sunset'
  alias: 'Run Outside Night Lights at Sunset'
  trigger:
  - platform: sun
    event: sunset
    #offset: "-00:45:00"
  action:
   - service: scene.turn_on
     entity_id: scene.outside_night_lights_on

- id: 'turn_outside_night_lights_on_alarm'
  alias: 'Turn Outside Night Lights on Alarm'
  trigger:
  - platform: state
    entity_id:
    - image_processing.tensorflow_driveway
  condition:
  - condition: state
    entity_id: light.front_garage
    state: 'off'
  - condition: state  # from sunset until sunrise
    entity_id: sun.sun
    state: 'below_horizon'
  - condition: template
    value_template: '{{ trigger.to_state.state |int > 0 }}'
  - condition: template
    value_template: >
      {%- if states.automation.turn_outside_night_lights_on_alarm.attributes.last_triggered -%}
          {{ (as_timestamp(now()) - as_timestamp(states.automation.turn_outside_night_lights_on_alarm.attributes.attributes.last_triggered)) > 30 }}
        {%- else -%}
          true
        {%- endif -%}
  action:
  - service: light.turn_on
    data:
      entity_id: light.front_garage
  - delay: input_datetime.motion_detection_delay
  - service: light.turn_off
    data:
     entity_id: light.front_garage

################################################################################
# Family Room
################################################################################
- id: 'toggle_multi_family_room_lights'
  alias: Multi Family Room Lights
  trigger:
  - entity_id: light.familyroom1
    platform: state
  - entity_id: light.familyroom2
    platform: state
  condition: []
  action:
  - data:
      entity_id: light.family_room
    service: light.toggle

################################################################################
# Default to Full Warm White
################################################################################
- id: 'turn_on_kitchen_lights_all_bulbs_are_off'
  initial_state: 'on'
  alias: Turn on Kitchen Lights when all bulbs are off
  trigger:
  - platform: state
    entity_id:
    - light.kitchen1
    - light.kitchen2
    - light.kitchen3
    - light.kitchen4
    - light.kitchen5
    - light.kitchen6
  condition:
    - condition: state
      state: 'on'
      entity_id: switch.kitchen
    - condition: state
      state: 'off'
      entity_id: light.kitchen1
    - condition: state
      state: 'off'
      entity_id: light.kitchen2
    - condition: state
      state: 'off'
      entity_id: light.kitchen3
    - condition: state
      state: 'off'
      entity_id: light.kitchen4
    - condition: state
      state: 'off'
      entity_id: light.kitchen5
    - condition: state
      state: 'off'
      entity_id: light.kitchen6
  action:
  - service: light.turn_on
    data:
      entity_id: light.kitchen
      white_value: 255
  - service: light.turn_on
    data:
      entity_id: light.kitchen
      color_temp: 500

################################################################################
# Reset
################################################################################
- id: 'turn_off_dog_outside'
  alias: turn_off_dog_outside
  trigger:
  - entity_id: input_boolean.dog_outside
    for:
      minutes: "{{ states('input_number.dog_outside_minutes') | int }}"
    from: 'off'
    platform: state
    to: 'on'
  condition: []
  action:
  - data:
      entity_id: input_boolean.dog_outside
    service: input_boolean.turn_off

################################################################################
# Bathroom Fans
################################################################################
- id: 'turn_off_bathroom_fan_after_15_minutes'
  alias: turn_off_bathroom_fan_after_15_minutes
  trigger:
  - entity_id: light.downstairs_bathroom
    for:
      minutes: "{{ states('input_number.bathroom_fan_minutes') | int }}"
    from: 'on'
    platform: state
    to: 'off'
  condition: []
  action:
  - data:
      entity_id: fan.downstairs_bathroom
    service: fan.turn_off

################################################################################
# Start HomeKit
################################################################################
- id: 'start_homekit'
  alias: 'start_homekit'
  initial_state: off
  trigger:
    - platform: homeassistant
      event: start
  action:
    - service: homekit.start
